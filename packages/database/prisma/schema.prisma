datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["metrics", "tracing"]
}

model Manufacturer {
    id String @id @default(cuid())

    created_at DateTime  @default(now())
    updated_at DateTime  @updatedAt
    deleted_at DateTime?

    name        String  @unique
    slug        String  @unique
    description String?
    image_url   String?

    discs    Disc[]
    plastics Plastic[]
}

enum DiscType {
    PUTTER
    MIDRANGE
    FAIRWAY
    DISTANCE
}

model Disc {
    id String @id @default(cuid())

    created_at DateTime  @default(now())
    updated_at DateTime  @updatedAt
    deleted_at DateTime?

    name        String  @unique
    slug        String  @unique
    description String?

    image_url    String?
    image_width  Int?
    image_height Int?
    image_format String?

    type DiscType

    speed Float
    glide Float
    turn  Float
    fade  Float

    manufacturer      Manufacturer @relation(fields: [manufacturer_slug], references: [slug])
    manufacturer_slug String
    products          Product[]

    @@index([type])
}

model Plastic {
    id String @id @default(cuid())

    created_at DateTime  @default(now())
    updated_at DateTime  @updatedAt
    deleted_at DateTime?

    name        String
    slug        String  @unique
    description String?

    manufacturer      Manufacturer @relation(fields: [manufacturer_slug], references: [slug])
    manufacturer_slug String

    products Product[]
}

model Retailer {
    id String @id @default(cuid())

    created_at DateTime  @default(now())
    updated_at DateTime  @updatedAt
    deleted_at DateTime?

    name        String
    slug        String  @unique
    description String?
    image_url   String?
    website_url String

    crawl_delay           Int?
    disallowed            String?
    allowed               String?
    current_sitemap_items Int     @default(0)
    pause_crawl           Boolean @default(false)

    products Product[]

    @@index([updated_at])
}

enum ProductCategory {
    DISC
    BAG
    ACCESSORY
    APPAREL
    EQUIPMENT
    BASKET
    OTHER
    NOT_SET
}

model Product {
    id String @id @default(cuid())

    created_at DateTime  @default(now())
    updated_at DateTime  @updatedAt
    deleted_at DateTime?

    name        String
    description String?
    image_url   String?
    url         String  @unique
    lastmod     String?
    priority    String?
    brand       String?
    speed       Float   @default(0)
    glide       Float   @default(0)
    turn        Float   @default(0)
    fade        Float   @default(0)

    meta_category    String?
    meta_http_status Int?

    retailer      Retailer @relation(fields: [retailer_slug], references: [slug])
    retailer_slug String

    category ProductCategory @default(NOT_SET)

    disc      Disc?   @relation(fields: [disc_slug], references: [slug])
    disc_slug String?

    plastic      Plastic? @relation(fields: [plastic_slug], references: [slug])
    plastic_slug String?

    price_history PriceHistory[]

    @@index([category])
}

model PriceHistory {
    id String @id @default(cuid())

    current_price  Float
    original_price Float
    in_stock       Boolean
    is_promotion   Boolean @default(false)
    quantity       Int     @default(0)

    created_at DateTime @default(now())

    product    Product @relation(fields: [product_id], references: [id])
    product_id String
}

// next-auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum Role {
    ADMIN
    SUBSCRIBER
    USER
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    role          Role      @default(USER)
    accounts      Account[]
    sessions      Session[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
